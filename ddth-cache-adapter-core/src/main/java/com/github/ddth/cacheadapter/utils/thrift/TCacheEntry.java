/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github.ddth.cacheadapter.utils.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCacheEntry implements org.apache.thrift.TBase<TCacheEntry, TCacheEntry._Fields>, java.io.Serializable, Cloneable, Comparable<TCacheEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCacheEntry");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("valueClass", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATION_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("creationTimestampMs", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_ACCESS_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAccessTimestampMs", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField EXPIRE_AFTER_WRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("expireAfterWrite", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField EXPIRE_AFTER_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("expireAfterAccess", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCacheEntryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCacheEntryTupleSchemeFactory());
  }

  public String key; // required
  public ByteBuffer value; // required
  public String valueClass; // required
  public long creationTimestampMs; // required
  public long lastAccessTimestampMs; // required
  public long expireAfterWrite; // required
  public long expireAfterAccess; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY((short)1, "key"),
    VALUE((short)2, "value"),
    VALUE_CLASS((short)3, "valueClass"),
    CREATION_TIMESTAMP_MS((short)4, "creationTimestampMs"),
    LAST_ACCESS_TIMESTAMP_MS((short)5, "lastAccessTimestampMs"),
    EXPIRE_AFTER_WRITE((short)6, "expireAfterWrite"),
    EXPIRE_AFTER_ACCESS((short)7, "expireAfterAccess");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // VALUE
          return VALUE;
        case 3: // VALUE_CLASS
          return VALUE_CLASS;
        case 4: // CREATION_TIMESTAMP_MS
          return CREATION_TIMESTAMP_MS;
        case 5: // LAST_ACCESS_TIMESTAMP_MS
          return LAST_ACCESS_TIMESTAMP_MS;
        case 6: // EXPIRE_AFTER_WRITE
          return EXPIRE_AFTER_WRITE;
        case 7: // EXPIRE_AFTER_ACCESS
          return EXPIRE_AFTER_ACCESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATIONTIMESTAMPMS_ISSET_ID = 0;
  private static final int __LASTACCESSTIMESTAMPMS_ISSET_ID = 1;
  private static final int __EXPIREAFTERWRITE_ISSET_ID = 2;
  private static final int __EXPIREAFTERACCESS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VALUE_CLASS, new org.apache.thrift.meta_data.FieldMetaData("valueClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATION_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("creationTimestampMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_ACCESS_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastAccessTimestampMs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRE_AFTER_WRITE, new org.apache.thrift.meta_data.FieldMetaData("expireAfterWrite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRE_AFTER_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("expireAfterAccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCacheEntry.class, metaDataMap);
  }

  public TCacheEntry() {
    this.creationTimestampMs = 0L;

    this.lastAccessTimestampMs = 0L;

    this.expireAfterWrite = -1L;

    this.expireAfterAccess = -1L;

  }

  public TCacheEntry(
    String key,
    ByteBuffer value,
    String valueClass,
    long creationTimestampMs,
    long lastAccessTimestampMs,
    long expireAfterWrite,
    long expireAfterAccess)
  {
    this();
    this.key = key;
    this.value = value;
    this.valueClass = valueClass;
    this.creationTimestampMs = creationTimestampMs;
    setCreationTimestampMsIsSet(true);
    this.lastAccessTimestampMs = lastAccessTimestampMs;
    setLastAccessTimestampMsIsSet(true);
    this.expireAfterWrite = expireAfterWrite;
    setExpireAfterWriteIsSet(true);
    this.expireAfterAccess = expireAfterAccess;
    setExpireAfterAccessIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCacheEntry(TCacheEntry other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetValue()) {
      this.value = org.apache.thrift.TBaseHelper.copyBinary(other.value);
;
    }
    if (other.isSetValueClass()) {
      this.valueClass = other.valueClass;
    }
    this.creationTimestampMs = other.creationTimestampMs;
    this.lastAccessTimestampMs = other.lastAccessTimestampMs;
    this.expireAfterWrite = other.expireAfterWrite;
    this.expireAfterAccess = other.expireAfterAccess;
  }

  public TCacheEntry deepCopy() {
    return new TCacheEntry(this);
  }

  @Override
  public void clear() {
    this.key = null;
    this.value = null;
    this.valueClass = null;
    this.creationTimestampMs = 0L;

    this.lastAccessTimestampMs = 0L;

    this.expireAfterWrite = -1L;

    this.expireAfterAccess = -1L;

  }

  public String getKey() {
    return this.key;
  }

  public TCacheEntry setKey(String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public byte[] getValue() {
    setValue(org.apache.thrift.TBaseHelper.rightSize(value));
    return value == null ? null : value.array();
  }

  public ByteBuffer bufferForValue() {
    return value;
  }

  public TCacheEntry setValue(byte[] value) {
    setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
    return this;
  }

  public TCacheEntry setValue(ByteBuffer value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public String getValueClass() {
    return this.valueClass;
  }

  public TCacheEntry setValueClass(String valueClass) {
    this.valueClass = valueClass;
    return this;
  }

  public void unsetValueClass() {
    this.valueClass = null;
  }

  /** Returns true if field valueClass is set (has been assigned a value) and false otherwise */
  public boolean isSetValueClass() {
    return this.valueClass != null;
  }

  public void setValueClassIsSet(boolean value) {
    if (!value) {
      this.valueClass = null;
    }
  }

  public long getCreationTimestampMs() {
    return this.creationTimestampMs;
  }

  public TCacheEntry setCreationTimestampMs(long creationTimestampMs) {
    this.creationTimestampMs = creationTimestampMs;
    setCreationTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreationTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIONTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field creationTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreationTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIONTIMESTAMPMS_ISSET_ID);
  }

  public void setCreationTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIONTIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastAccessTimestampMs() {
    return this.lastAccessTimestampMs;
  }

  public TCacheEntry setLastAccessTimestampMs(long lastAccessTimestampMs) {
    this.lastAccessTimestampMs = lastAccessTimestampMs;
    setLastAccessTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastAccessTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTACCESSTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastAccessTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastAccessTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTACCESSTIMESTAMPMS_ISSET_ID);
  }

  public void setLastAccessTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTACCESSTIMESTAMPMS_ISSET_ID, value);
  }

  public long getExpireAfterWrite() {
    return this.expireAfterWrite;
  }

  public TCacheEntry setExpireAfterWrite(long expireAfterWrite) {
    this.expireAfterWrite = expireAfterWrite;
    setExpireAfterWriteIsSet(true);
    return this;
  }

  public void unsetExpireAfterWrite() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIREAFTERWRITE_ISSET_ID);
  }

  /** Returns true if field expireAfterWrite is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireAfterWrite() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIREAFTERWRITE_ISSET_ID);
  }

  public void setExpireAfterWriteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIREAFTERWRITE_ISSET_ID, value);
  }

  public long getExpireAfterAccess() {
    return this.expireAfterAccess;
  }

  public TCacheEntry setExpireAfterAccess(long expireAfterAccess) {
    this.expireAfterAccess = expireAfterAccess;
    setExpireAfterAccessIsSet(true);
    return this;
  }

  public void unsetExpireAfterAccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIREAFTERACCESS_ISSET_ID);
  }

  /** Returns true if field expireAfterAccess is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireAfterAccess() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIREAFTERACCESS_ISSET_ID);
  }

  public void setExpireAfterAccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIREAFTERACCESS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((ByteBuffer)value);
      }
      break;

    case VALUE_CLASS:
      if (value == null) {
        unsetValueClass();
      } else {
        setValueClass((String)value);
      }
      break;

    case CREATION_TIMESTAMP_MS:
      if (value == null) {
        unsetCreationTimestampMs();
      } else {
        setCreationTimestampMs((Long)value);
      }
      break;

    case LAST_ACCESS_TIMESTAMP_MS:
      if (value == null) {
        unsetLastAccessTimestampMs();
      } else {
        setLastAccessTimestampMs((Long)value);
      }
      break;

    case EXPIRE_AFTER_WRITE:
      if (value == null) {
        unsetExpireAfterWrite();
      } else {
        setExpireAfterWrite((Long)value);
      }
      break;

    case EXPIRE_AFTER_ACCESS:
      if (value == null) {
        unsetExpireAfterAccess();
      } else {
        setExpireAfterAccess((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return getKey();

    case VALUE:
      return getValue();

    case VALUE_CLASS:
      return getValueClass();

    case CREATION_TIMESTAMP_MS:
      return Long.valueOf(getCreationTimestampMs());

    case LAST_ACCESS_TIMESTAMP_MS:
      return Long.valueOf(getLastAccessTimestampMs());

    case EXPIRE_AFTER_WRITE:
      return Long.valueOf(getExpireAfterWrite());

    case EXPIRE_AFTER_ACCESS:
      return Long.valueOf(getExpireAfterAccess());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEY:
      return isSetKey();
    case VALUE:
      return isSetValue();
    case VALUE_CLASS:
      return isSetValueClass();
    case CREATION_TIMESTAMP_MS:
      return isSetCreationTimestampMs();
    case LAST_ACCESS_TIMESTAMP_MS:
      return isSetLastAccessTimestampMs();
    case EXPIRE_AFTER_WRITE:
      return isSetExpireAfterWrite();
    case EXPIRE_AFTER_ACCESS:
      return isSetExpireAfterAccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCacheEntry)
      return this.equals((TCacheEntry)that);
    return false;
  }

  public boolean equals(TCacheEntry that) {
    if (that == null)
      return false;

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_valueClass = true && this.isSetValueClass();
    boolean that_present_valueClass = true && that.isSetValueClass();
    if (this_present_valueClass || that_present_valueClass) {
      if (!(this_present_valueClass && that_present_valueClass))
        return false;
      if (!this.valueClass.equals(that.valueClass))
        return false;
    }

    boolean this_present_creationTimestampMs = true;
    boolean that_present_creationTimestampMs = true;
    if (this_present_creationTimestampMs || that_present_creationTimestampMs) {
      if (!(this_present_creationTimestampMs && that_present_creationTimestampMs))
        return false;
      if (this.creationTimestampMs != that.creationTimestampMs)
        return false;
    }

    boolean this_present_lastAccessTimestampMs = true;
    boolean that_present_lastAccessTimestampMs = true;
    if (this_present_lastAccessTimestampMs || that_present_lastAccessTimestampMs) {
      if (!(this_present_lastAccessTimestampMs && that_present_lastAccessTimestampMs))
        return false;
      if (this.lastAccessTimestampMs != that.lastAccessTimestampMs)
        return false;
    }

    boolean this_present_expireAfterWrite = true;
    boolean that_present_expireAfterWrite = true;
    if (this_present_expireAfterWrite || that_present_expireAfterWrite) {
      if (!(this_present_expireAfterWrite && that_present_expireAfterWrite))
        return false;
      if (this.expireAfterWrite != that.expireAfterWrite)
        return false;
    }

    boolean this_present_expireAfterAccess = true;
    boolean that_present_expireAfterAccess = true;
    if (this_present_expireAfterAccess || that_present_expireAfterAccess) {
      if (!(this_present_expireAfterAccess && that_present_expireAfterAccess))
        return false;
      if (this.expireAfterAccess != that.expireAfterAccess)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TCacheEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueClass()).compareTo(other.isSetValueClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueClass, other.valueClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreationTimestampMs()).compareTo(other.isSetCreationTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreationTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creationTimestampMs, other.creationTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastAccessTimestampMs()).compareTo(other.isSetLastAccessTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastAccessTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAccessTimestampMs, other.lastAccessTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireAfterWrite()).compareTo(other.isSetExpireAfterWrite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireAfterWrite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireAfterWrite, other.expireAfterWrite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpireAfterAccess()).compareTo(other.isSetExpireAfterAccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireAfterAccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireAfterAccess, other.expireAfterAccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCacheEntry(");
    boolean first = true;

    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.value, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueClass:");
    if (this.valueClass == null) {
      sb.append("null");
    } else {
      sb.append(this.valueClass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creationTimestampMs:");
    sb.append(this.creationTimestampMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastAccessTimestampMs:");
    sb.append(this.lastAccessTimestampMs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireAfterWrite:");
    sb.append(this.expireAfterWrite);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireAfterAccess:");
    sb.append(this.expireAfterAccess);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCacheEntryStandardSchemeFactory implements SchemeFactory {
    public TCacheEntryStandardScheme getScheme() {
      return new TCacheEntryStandardScheme();
    }
  }

  private static class TCacheEntryStandardScheme extends StandardScheme<TCacheEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCacheEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readBinary();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.valueClass = iprot.readString();
              struct.setValueClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATION_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creationTimestampMs = iprot.readI64();
              struct.setCreationTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_ACCESS_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastAccessTimestampMs = iprot.readI64();
              struct.setLastAccessTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPIRE_AFTER_WRITE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireAfterWrite = iprot.readI64();
              struct.setExpireAfterWriteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXPIRE_AFTER_ACCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireAfterAccess = iprot.readI64();
              struct.setExpireAfterAccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCacheEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeBinary(struct.value);
        oprot.writeFieldEnd();
      }
      if (struct.valueClass != null) {
        oprot.writeFieldBegin(VALUE_CLASS_FIELD_DESC);
        oprot.writeString(struct.valueClass);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATION_TIMESTAMP_MS_FIELD_DESC);
      oprot.writeI64(struct.creationTimestampMs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_ACCESS_TIMESTAMP_MS_FIELD_DESC);
      oprot.writeI64(struct.lastAccessTimestampMs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPIRE_AFTER_WRITE_FIELD_DESC);
      oprot.writeI64(struct.expireAfterWrite);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPIRE_AFTER_ACCESS_FIELD_DESC);
      oprot.writeI64(struct.expireAfterAccess);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCacheEntryTupleSchemeFactory implements SchemeFactory {
    public TCacheEntryTupleScheme getScheme() {
      return new TCacheEntryTupleScheme();
    }
  }

  private static class TCacheEntryTupleScheme extends TupleScheme<TCacheEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCacheEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetKey()) {
        optionals.set(0);
      }
      if (struct.isSetValue()) {
        optionals.set(1);
      }
      if (struct.isSetValueClass()) {
        optionals.set(2);
      }
      if (struct.isSetCreationTimestampMs()) {
        optionals.set(3);
      }
      if (struct.isSetLastAccessTimestampMs()) {
        optionals.set(4);
      }
      if (struct.isSetExpireAfterWrite()) {
        optionals.set(5);
      }
      if (struct.isSetExpireAfterAccess()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetKey()) {
        oprot.writeString(struct.key);
      }
      if (struct.isSetValue()) {
        oprot.writeBinary(struct.value);
      }
      if (struct.isSetValueClass()) {
        oprot.writeString(struct.valueClass);
      }
      if (struct.isSetCreationTimestampMs()) {
        oprot.writeI64(struct.creationTimestampMs);
      }
      if (struct.isSetLastAccessTimestampMs()) {
        oprot.writeI64(struct.lastAccessTimestampMs);
      }
      if (struct.isSetExpireAfterWrite()) {
        oprot.writeI64(struct.expireAfterWrite);
      }
      if (struct.isSetExpireAfterAccess()) {
        oprot.writeI64(struct.expireAfterAccess);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCacheEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.key = iprot.readString();
        struct.setKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.value = iprot.readBinary();
        struct.setValueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.valueClass = iprot.readString();
        struct.setValueClassIsSet(true);
      }
      if (incoming.get(3)) {
        struct.creationTimestampMs = iprot.readI64();
        struct.setCreationTimestampMsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastAccessTimestampMs = iprot.readI64();
        struct.setLastAccessTimestampMsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.expireAfterWrite = iprot.readI64();
        struct.setExpireAfterWriteIsSet(true);
      }
      if (incoming.get(6)) {
        struct.expireAfterAccess = iprot.readI64();
        struct.setExpireAfterAccessIsSet(true);
      }
    }
  }

}

